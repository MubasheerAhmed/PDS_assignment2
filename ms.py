# -*- coding: utf-8 -*-
"""MS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1POyMoj5HCbm4FtVQ1-v5pI33Adr1KOWT
"""

import pandas as pd
df = pd.read_csv('/content/train.csv')
print(df)

# Check for missing values in each column
missing_values = df.isnull().sum()
print(missing_values)

for col in df.columns:
    if df[col].dtype == 'object':
        df[col].fillna(df[col].mode().iloc[0], inplace=True)
    else:
        df[col].fillna(df[col].mean(), inplace=True)

# Alternatively, you can drop rows with missing values
# df.dropna(inplace=True)

# Check if there are any missing values left
missing_values_after = df.isnull().sum()
print("\nMissing Values After Imputation:")
print(missing_values_after)

# Remove units from 'Mileage'
df['Mileage'] = df['Mileage'].astype(str)
df['Mileage'] = df['Mileage'].str.replace(' kmpl', '').str.replace(' km/kg', '').astype(float)

# Remove units from 'Engine'
df['Engine'] = df['Engine'].astype(str)
df['Engine'] = df['Engine'].str.replace(' CC', '').astype(float)

# Remove units from 'Power'
df['Power'] = df['Power'].astype(str)
df['Power'] = df['Power'].str.replace(' bhp', '').astype(float)

# Remove units from 'New_Price' and handle 'nan' values
df['New_Price'] = df['New_Price'].str.replace(' Cr', '0000000')
df['New_Price'] = df['New_Price'].replace({'': None}).astype(float)

# Print the updated DataFrame
print(df)

# Convert categorical variables into one-hot encoded values
df = pd.get_dummies(df, columns=['Fuel_Type', 'Transmission'])

# Print the updated DataFrame
print(df)

from datetime import datetime

# Calculate current year
current_year = datetime.now().year

# Create new feature 'Current_Age'
df['Current_Age'] = current_year - df['Year']

# Print the updated DataFrame
print(df)

import pandas as pd

# Assuming 'df' is your DataFrame containing the car data

# Select specific columns
selected_columns = df[['Name', 'Location', 'Year', 'Owner_Type', 'Mileage', 'Engine', 'Power', 'Seats', 'New_Price', 'Price']]

# Filter rows based on a condition
filtered_data = df[df['Price'] > 10]

# Rename columns
renamed_columns = df.rename(columns={'Name': 'Car_Name', 'Year': 'Manufacture_Year'})

# Mutate (Add new column based on existing columns)
df['Power_to_Weight_Ratio'] = df['Power'] / df['Kilometers_Driven']

# Arrange rows based on a column
arranged_data = df.sort_values(by='Price', ascending=False)

# Summarize with group by operations
grouped_data = df.groupby('Location').agg({'Price': 'mean', 'Kilometers_Driven': 'sum'}).reset_index()

# Print the results
print("Selected Columns:")
print(selected_columns)
print("\nFiltered Data:")
print(filtered_data)
print("\nRenamed Columns:")
print(renamed_columns)
print("\nMutated Data:")
print(df[['Name', 'Power', 'Kilometers_Driven', 'Power_to_Weight_Ratio']])
print("\nArranged Data:")
print(arranged_data)
print("\nGrouped Data:")
print(grouped_data)